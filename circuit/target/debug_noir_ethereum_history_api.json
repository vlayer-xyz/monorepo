{"debug_symbols":[{"locations":{"0":[{"span":{"start":52,"end":119},"file":0}],"1":[{"span":{"start":132,"end":138},"file":0}],"2":[{"span":{"start":132,"end":138},"file":0}],"3":[{"span":{"start":132,"end":138},"file":0}],"4":[{"span":{"start":132,"end":138},"file":0}],"5":[{"span":{"start":132,"end":138},"file":0}],"0.11":[{"span":{"start":132,"end":138},"file":0}],"0.12":[{"span":{"start":132,"end":138},"file":0}],"0.13":[{"span":{"start":807,"end":844},"file":0}]}}],"file_map":{"0":{"source":"fn main(x: Field, y: pub Field) {\n    let account = get_account(18800000, \"0xe9c3123e4cf348c66b20a985af264891fc0a441a\");\n    assert(x != y);\n}\n\nstruct WithProof<T> {\n    value: T,\n    proof: [u8; 1],\n}\n\nstruct Account {\n    nonce: [u8; 32],\n    balance: [u8; 32],\n    storageRoot: [u8; 32],\n    codeHash: [u8; 32]\n}\n\n// #[oracle(get_account)]\n// unconstrained fn get_account_oracle(block_no: Field, account: str<42>) -> WithProof<Account> {}\n\n// unconstrained fn get_account(block_no: Field, account: str<42>) -> Account {\n//     let WithProof { value, proof } = get_account_oracle(block_no, account);\n//     value\n// }\n\n#[oracle(get_account)]\nunconstrained fn get_account_oracle(block_no: Field, account: str<42>) -> Field {}\n\nunconstrained fn get_account(block_no: Field, account: str<42>) -> Field {\n    get_account_oracle(block_no, account)\n}\n\n#[test]\nfn test_main() {\n    main(1, 2);\n}\n","path":"/Users/akonior/projects/zk/noir-ethereum-history-api/circuit/src/main.nr"}},"warnings":[]}