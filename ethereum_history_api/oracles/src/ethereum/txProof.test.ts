import { describe, it, expect } from 'vitest';
import { getTxProof } from './txProof.js';
import { createMockClient } from './mockClient.js';
import { Call } from './recordingClient.js';
import { GetBlockReturnType } from 'viem';

describe('getTxProof', () => {
  it('success', async () => {
    const blockNumber = 19_432_673n;
    const mockFilePaths = [
      './fixtures/mainnet/cancun/small_block/eth_getBlockByHash_19432673_includeTransactions.json'
    ];
    const mockingClient = await createMockClient(mockFilePaths);
    const txProof = await getTxProof(mockingClient, blockNumber, 0);

    expect(txProof).toMatchInlineSnapshot(`
      [
        "0xf851a0359b6d2c14608327e7176a447c16f6346b5c68f2bd185fe28f2fb0f870c8cd3f80808080808080a0f1d6216c96274f96ad98625c8a2760506f71f6608d30a87afe1f651cc9995cb88080808080808080",
        "0xf9038430b9038002f9037c0182057c8402b85072850f43e13c39830339c6943fc91a3afd70395cd496c647d5a6cc9d4b2b7fad88482a1c7300080000b903043593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000065f2d44700000000000000000000000000000000000000000000000000000000000000030b080c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000482a1c730008000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000482a1c73000800000000000000000000000000000000000000000000000000bc646dcb81c5ff44ec00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000001bfce574deff725a3f483c334b790e25c8fa9779000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000c001a09550c8516f6323ea2c6253329e0c35149f682a123ce5bcfe80331135b9b0c4d3a041a7daade4ae60b75f5066467cc32cf285b0c998405b6e175455f925b9c01dbb",
      ]
    `);
  });

  it('fail: txRoot mismatch', async () => {
    const blockNumber = 19_432_673n;
    const mockFilePaths = [
      './fixtures/mainnet/cancun/small_block/eth_getBlockByHash_19432673_includeTransactions.json'
    ];

    const modifyTx = (call: Call): Call => {
      if (call.method === 'getBlock') {
        (call.result as GetBlockReturnType<undefined, true>).transactions[0].value += 1n;
      }
      return call;
    };

    const mockingClient = await createMockClient(mockFilePaths, modifyTx);
    await expect(async () => await getTxProof(mockingClient, blockNumber, 0)).rejects.toThrowError('txRoot mismatch');
  });
});
