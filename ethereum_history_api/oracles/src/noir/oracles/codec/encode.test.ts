import { describe, expect, it } from 'vitest';
import { encodeAddress, encodeBytes32, encodeHex } from './encode.js';

describe('encodeHex', () => {
  it('invalid hexstring', () => {
    expect(() => encodeHex('0xg')).toThrow('Invalid hexstring: 0xg');
  });
});

describe('encodeBytes32', () => {
  it('zero', () => {
    // prettier-ignore
    expect(encodeBytes32(0n)).toStrictEqual([
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0',
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0'
    ]);
  });

  it('one', () => {
    // prettier-ignore
    expect(encodeBytes32(1n)).toStrictEqual([
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0',
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x1'
    ]);
  });

  it('4 bytes number', () => {
    // prettier-ignore
    expect(encodeBytes32(3000000019n)).toStrictEqual([
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0',
      '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0x0', '0xb2', '0xd0', '0x5e', '0x13'
    ]);
  });

  it('MAX_INT_256', () => {
    // prettier-ignore
    expect(encodeBytes32(2n ** 256n - 1n)).toStrictEqual([
      '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff',
      '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff', '0xff',
      '0xff', '0xff', '0xff', '0xff'
    ]);
  });

  it('throws if negative value', () => {
    expect(() => encodeBytes32(-1n)).toThrow('Invalid Bytes32: Negative');
  });

  it('throws if overflows', () => {
    expect(() => encodeBytes32(2n ** 256n)).toThrow('Invalid Bytes32: Overflow');
  });
});

describe('encodeAddress', () => {
  it('simple', () => {
    // prettier-ignore
    expect(encodeAddress('0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb')).toStrictEqual([
      '0xb4', '0x7e', '0x3c', '0xd8', '0x37', '0xdd', '0xf8', '0xe4', '0xc5', '0x7f', '0x5', '0xd7', '0xa', '0xb8',
      '0x65', '0xde', '0x6e', '0x19', '0x3b', '0xbb'
    ]);
  });

  it('mixcase', () => {
    // prettier-ignore
    expect(encodeAddress('0xb47e3cd837dDF8e4c57f05d70ab865de6e193bbb')).toStrictEqual([
      '0xb4', '0x7e', '0x3c', '0xd8', '0x37', '0xdD', '0xF8', '0xe4', '0xc5', '0x7f', '0x5', '0xd7', '0xa', '0xb8',
      '0x65', '0xde', '0x6e', '0x19', '0x3b', '0xbb'
    ]);
  });

  it('invalid address', () => {
    // prettier-ignore
    expect(() => encodeAddress('0xb47e3cd837dDF8e4c57f05d70ab865de6e193bbbaa')).toThrow('Invalid address: 0xb47e3cd837dDF8e4c57f05d70ab865de6e193bbbaa');
  });
});
