import { JSONRPCResponse } from 'json-rpc-2.0';
import { buildOracleServer } from './app.js';

import { describe, it, expect, afterAll } from 'vitest';

describe('Oracle Server', () => {
  const app = buildOracleServer();
  afterAll(async () => {
    await app.close();
  });

  it('should handle get_header request', async () => {
    const response = await app.inject({
      method: 'POST',
      url: '/',
      payload: {
        method: 'get_header',
        params: [{ Single: '0000000000000000000000000000000000000000000000000000000000d895ce' }],
        id: 2,
        jsonrpc: '2.0'
      }
    });

    expect(response.statusCode).toBe(200);
    expect(response.json<JSONRPCResponse>()).toMatchSnapshot();
  });

  it('should handle get_account request', async () => {
    const response = await app.inject({
      method: 'POST',
      url: '/',
      payload: {
        method: 'get_account',
        params: [
          { Single: '0000000000000000000000000000000000000000000000000000000000d895ce' },
          {
            Array: [
              '00000000000000000000000000000000000000000000000000000000000000b4',
              '000000000000000000000000000000000000000000000000000000000000007e',
              '000000000000000000000000000000000000000000000000000000000000003c',
              '00000000000000000000000000000000000000000000000000000000000000d8',
              '0000000000000000000000000000000000000000000000000000000000000037',
              '00000000000000000000000000000000000000000000000000000000000000dd',
              '00000000000000000000000000000000000000000000000000000000000000f8',
              '00000000000000000000000000000000000000000000000000000000000000e4',
              '00000000000000000000000000000000000000000000000000000000000000c5',
              '000000000000000000000000000000000000000000000000000000000000007f',
              '0000000000000000000000000000000000000000000000000000000000000005',
              '00000000000000000000000000000000000000000000000000000000000000d7',
              '000000000000000000000000000000000000000000000000000000000000000a',
              '00000000000000000000000000000000000000000000000000000000000000b8',
              '0000000000000000000000000000000000000000000000000000000000000065',
              '00000000000000000000000000000000000000000000000000000000000000de',
              '000000000000000000000000000000000000000000000000000000000000006e',
              '0000000000000000000000000000000000000000000000000000000000000019',
              '000000000000000000000000000000000000000000000000000000000000003b',
              '00000000000000000000000000000000000000000000000000000000000000bb'
            ]
          }
        ],
        id: 2,
        jsonrpc: '2.0'
      }
    });

    expect(response.statusCode).toBe(200);
    expect(response.json<JSONRPCResponse>()).toMatchSnapshot();
  });
});
