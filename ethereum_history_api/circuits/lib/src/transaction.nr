use crate::misc::{types::{Bytes32, Address}, option::make_option};
use dep::std::unsafe::zeroed;
use crate::header::get_header;
use crate::verifiers::transaction::verify_tx;
use crate::merkle_patricia_proofs::proof::{Proof, ProofInput};

global MAX_KEY_LEN = 3;
global MAX_DEPTH_NO_LEAF = 6;
global MAX_PREFIXED_KEY_NIBBLE_LEN = 8; // (MAX_KEY_LEN + 1) * 2

global MAX_VALUE_LEN_M = 1000;
global MAX_LEAF_LEN_M = 1011;

global LEGACY_MAX_TX_ENCODED_LEN = 525;

type TxType = u8;

struct TxPartial<MAX_DATA_LEN> {
    nonce: u64,
    gas_limit: u64,
    to: Option<Address>,
    value: U128,
    data: BoundedVec<u8, MAX_DATA_LEN>,
    v: u8,  // ECDSA recovery id
    r: Bytes32,  // ECDSA signature part
    s: Bytes32,  // ECDSA signature part
}

impl<MAX_DATA_LEN> Eq for TxPartial<MAX_DATA_LEN> {
    fn eq(self, other: Self) -> bool {
        (self.nonce == other.nonce) &
        (self.gas_limit == other.gas_limit) &
        (self.to == other.to) &
        (self.value == other.value) &
        (self.data == other.data) &
        (self.v == other.v) &
        (self.r == other.r) &
        (self.s == other.s)
    }
}

struct ForeignCallTransaction<MAX_DATA_LEN> {
    nonce: u64,
    gas_limit: u64,
    to: Address,
    to_is_some: bool,
    value_hi: u64,
    value_lo: u64,
    data: [u8; MAX_DATA_LEN],
    data_len: u64,
    v: u8,  // ECDSA recovery id
    r: Bytes32,  // ECDSA signature part
    s: Bytes32,  // ECDSA signature part
}

impl<MAX_DATA_LEN> From<TxPartial> for ForeignCallTransaction<MAX_DATA_LEN> {
    fn from(tx: TxPartial<MAX_DATA_LEN>) -> Self {
        let mut data = [0; MAX_DATA_LEN];

        // For some unclear reason (https://github.com/noir-lang/noir/issues/5011) - dynamic loop also works here, but we refrain from using it out of abundance of caution
        for i in 0..MAX_DATA_LEN {
            if (i < tx.data.len) {
                data[i] = tx.data.storage[i];
            }
        }
        ForeignCallTransaction {
            nonce: tx.nonce,
            gas_limit: tx.gas_limit,
            to: tx.to.unwrap_or(zeroed()),
            to_is_some: tx.to.is_some(),
            value_hi: tx.value.hi as u64,
            value_lo: tx.value.lo as u64,
            data,
            data_len: tx.data.len,
            v: tx.v,
            r: tx.r,
            s: tx.s
        }
    }
}

impl<MAX_DATA_LEN> From<ForeignCallTransaction> for TxPartial<MAX_DATA_LEN> {
    fn from(tx: ForeignCallTransaction<MAX_DATA_LEN>) -> Self {
        let data = BoundedVec { storage: tx.data, len: tx.data_len };
        TxPartial {
            nonce: tx.nonce,
            gas_limit: tx.gas_limit,
            to: make_option(tx.to, tx.to_is_some),
            value: U128::from_u64s_be(tx.value_hi, tx.value_lo),
            data,
            v: tx.v,
            r: tx.r,
            s: tx.s
        }
    }
}

struct PhantomTransactionProofLen<MAX_PROOF_LEN> {}
struct PhantomTransactionRlpLen<MAX_RLP_LEN> {}

type ProofInputSerialized<LEN> = [Field; LEN];

struct TransactionWithinBlock<MAX_DATA_LEN> {
    transaction: TxPartial<MAX_DATA_LEN>,
    block_hash: Bytes32
}

pub fn get_transaction<MAX_DATA_LEN>(
    chain_id: Field,
    block_number: u64,
    tx_idx: Field,
) -> TransactionWithinBlock<MAX_DATA_LEN> {
    let (tx_type, transaction, proof_input) = get_transaction_unconstrained(chain_id, block_number, tx_idx);
    let header = get_header(chain_id, block_number);
    verify_tx(tx_idx, tx_type, transaction, proof_input, header.transactions_root);

    TransactionWithinBlock { transaction, block_hash: header.hash }
}

#[oracle(get_transaction)]
unconstrained fn get_transaction_oracle<MAX_DATA_LEN, PROOF_INPUT_LEN>(
    _chain_id: Field,
    _block_number: u64,
    _tx_idx: Field
) -> (TxType, ForeignCallTransaction<MAX_DATA_LEN>, ProofInputSerialized<PROOF_INPUT_LEN>) {}

unconstrained fn get_transaction_unconstrained<MAX_DATA_LEN>(
    chain_id: Field,
    block_number: u64,
    tx_idx: Field
) -> (TxType, TxPartial<MAX_DATA_LEN>, ProofInput<MAX_PREFIXED_KEY_NIBBLE_LEN, MAX_VALUE_LEN_M, MAX_DEPTH_NO_LEAF, MAX_LEAF_LEN_M>) {
    let (tx_type, transaction, proof_input) = get_transaction_oracle(chain_id, block_number, tx_idx);
    let transaction: TxPartial<MAX_DATA_LEN> = transaction.into();
    let proof_input = ProofInput::deserialize(proof_input);

    (tx_type, transaction, proof_input)
}
