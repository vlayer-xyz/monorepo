mod extract_log {
    use crate::fixtures::mainnet::{
        cancun::{
        small_block::{receipt::receipt_rlp as small_block_receipt_rlp, log::log as small_block_log},
        approve::{receipt::receipt_rlp as approve_receipt_rlp, log::log as approve_log}
    }
    };
    use crate::log::{extract_log, PhantomMaxLogDataLen, PhantomMaxLogsCount};
    use crate::misc::arrays::sub_array_equals_up_to_length;

    global phantom_max_log_data_len: PhantomMaxLogDataLen<32> = PhantomMaxLogDataLen {};
    global phantom_max_logs_count: PhantomMaxLogsCount<8> = PhantomMaxLogsCount {};

    #[test]
    fn success_small_block() {
        let log = extract_log(
            small_block_receipt_rlp,
            0,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
        assert_eq(log, small_block_log);
    }

    #[test]
    fn success_approve() {
        let log = extract_log(
            approve_receipt_rlp,
            0,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
        assert_eq(log, approve_log);
    }

    #[test]
    fn big_max_log_data_len() {
        let big_phantom_max_log_data_len: PhantomMaxLogDataLen<100> = PhantomMaxLogDataLen {};
        let log = extract_log(
            small_block_receipt_rlp,
            0,
            big_phantom_max_log_data_len,
            phantom_max_logs_count
        );
        assert_eq(log.address, small_block_log.address);
        assert_eq(log.topics, small_block_log.topics);
        assert_eq(log.data.len(), small_block_log.data.len());
        assert(
            sub_array_equals_up_to_length(
                small_block_log.data.storage,
                log.data.storage,
                0,
                log.data.len()
            )
        );
    }

    #[test(should_fail)] // Log index out of bounds"
    fn index_out_of_bound() {
        let _ = extract_log(
            small_block_receipt_rlp,
            1,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
    }

    #[test(should_fail_with="Log data too long")]
    fn log_data_too_long() {
        let small_phantom_max_log_data_len: PhantomMaxLogDataLen<1> = PhantomMaxLogDataLen {};
        let _ = extract_log(
            small_block_receipt_rlp,
            0,
            small_phantom_max_log_data_len,
            phantom_max_logs_count
        );
    }

    #[test(should_fail_with="Inconsistent rlp length")]
    fn small_max_log_count() {
        let phantom_max_logs_count: PhantomMaxLogsCount<0> = PhantomMaxLogsCount {};
        let _ = extract_log(
            small_block_receipt_rlp,
            0,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
    }

    #[test(should_fail_with="Invalid receipt fields count")]
    fn invalid_receipt_field_count() {
        let receipt_rlp_with_three_receipt_fields = [
            249, 1, 166, 131, 10, 23, 225, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 248, 157, 248, 155, 148, 81, 73, 16, 119, 26, 249, 202, 101, 106, 248, 64, 223, 248, 62, 130, 100, 236, 249, 134, 202, 248, 99, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 77, 129, 72, 126, 206, 50, 233, 90, 226, 190, 229, 252, 134, 15, 24, 159, 225, 99, 216, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 95, 102, 2, 57, 112, 124, 157, 227, 70, 45, 63, 166, 51, 242, 114, 58, 208, 184, 132, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 68, 18, 127, 180, 63, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ];

        let _ = extract_log(
            receipt_rlp_with_three_receipt_fields,
            0,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
    }

    #[test(should_fail_with="Invalid log fields count")]
    fn invalid_log_field_count() {
        let receipt_rlp_with_two_log_fields = [
            249, 2, 9, 1, 131, 10, 23, 225, 185, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 64, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 248, 255, 248, 253, 148, 81, 73, 16, 119, 26, 249, 202, 101, 106, 248, 64, 223, 248, 62, 130, 100, 236, 249, 134, 202, 248, 230, 160, 221, 242, 82, 173, 27, 226, 200, 155, 105, 194, 176, 104, 252, 55, 141, 170, 149, 43, 167, 241, 99, 196, 161, 22, 40, 245, 90, 77, 245, 35, 179, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 250, 77, 129, 72, 126, 206, 50, 233, 90, 226, 190, 229, 252, 134, 15, 24, 159, 225, 99, 216, 184, 162, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        ];

        let _ = extract_log(
            receipt_rlp_with_two_log_fields,
            0,
            phantom_max_log_data_len,
            phantom_max_logs_count
        );
    }
}
